#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <filesystem>
#include <map>
#include "other.h"

using namespace std;
using namespace filesystem;

string version = "1.6 Alpha"; // –í–µ—Ä—Å–∏—è SpaceDOS

map<string, string> User_Settings; // –Ø–∑—ã–∫, Username, –ü–∞—Ä–æ–ª—å, –î–µ–±–∞–≥ –º–æ–¥–µ

bool Password = false;

path dataFilePath = "Data/data.data"; // –ü—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
path logFilePath = "Data/logs.data"; // –ü—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏ (–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å –¥–µ–±–∞–≥ –º–æ–¥–µ)
path dataTempFilePath = "Data/tempData.data"; // –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

void CreateFolders() {
    create_directory("Addons"); // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ Addons (–ë–æ–∂–µ –∑–∞—á–µ–º —è –≤—Å—ë –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é xD)

    create_directory("Data");
    create_directory("Data/Games");

    create_directory("Temp");

    create_directory("Music");
    create_directory("Texts");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–æ–≤ –∏ —Ñ–∞–π–ª–∞ AddonsList.json
void CheckAddons() {
    //string path = "Addons/AddonsList.json";
    path path = "Addons/AddonsList.txt";
    if (exists(path)) {
        LogMessage("INFO", {"The file \"AddonsList.txt\" was found.", "–§–∞–π–ª \"AddonsList.txt\" –Ω–∞–π–¥–µ–Ω"}, 000); // –ú-–¥–∞.... –ù–∏—á–µ–≥–æ –ø—É—Ç–Ω–æ–≥–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –¥–ª—è LogMessage üíÄüíÄüíÄ

        
    } 
    else {
        LogMessage("ERROR", {"The file \"AddonsList.txt\" was not found.", "–§–∞–π–ª \"AddonsList.txt\" –Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404);

        ifstream file(path);
        if (!file) {
            ofstream data(path);
            if (data) {
                data.close();
            }
            else {
                LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ AddonsList.txt"}, 000);
            }
        }
        else {
            file.close();
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
void CreateLogFile() {
    ifstream file(logFilePath);
    if (!file && User_Settings["Debug Mode"] == "true") {
        ofstream data(logFilePath);
        if (data) {
            data.close();
        }
        else {
            LogMessage("ERROR", {"Error opening log file", "–û—à–∏–±–∫–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞"}, 000);
        }
    }
    else {
        file.close();
    }
}

// –°–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è SpaceDOS
void CreateDataFile() {
    ifstream file(dataFilePath);
    if (!file) {
        ofstream data(dataFilePath);
        if (data) {
            data << "Language: English" << '\n';
            data << "UserName: unknown" << '\n';
            data << "Version: " << version << '\n';
            data << "Debug Mode: false" << '\n';
            data << "Password: " << '\n';
            data.close();
        }
        else {
            LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
        }
    }
    else {
        file.close();
    }
}

// –°–æ–∑–¥–∞–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
void CreateDataFile(path FilePath, vector<string> VarNames , vector<string> VarVar) {
    ifstream file(FilePath);
    if ((VarNames.empty() && VarVar.empty()) || VarNames.empty() || VarVar.empty()) {
        //cout << "–ê –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ì–î–ï?!" << endl;
        VarNames.push_back("Lol");
        VarVar.push_back("Lol2");
    }
    else if (!file) {
        ofstream data(FilePath);
        if (data) {
            int i = 0;
            while (i <= (VarNames.size() - 1) && i <= (VarVar.size() - 1)) {
                cout << to_string(i);
                data << VarNames[i] + ": " + VarVar[i] << '\n';
                i++;
            }
            cout << to_string(VarNames.size()) << to_string(VarVar.size()) << endl;
            data.close();
        }
        else {
            LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
        }
    }
    else {
        file.close();
    }
}

// –ü—Ä–æ—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏ Data/data.data
void ReadDataFile() {
    ifstream data(dataFilePath);
    if (data) {
        string line;
        bool foundLanguage = false;
        bool foundUsername = false;
        bool foundVersion = false;
        bool foundDebug_Mode = false;
        bool foundPassword = false;
        while (getline(data, line)) {
            if (!foundLanguage && line.find("Language: ") != string::npos) {
                User_Settings["language"] = line.substr(10);
                foundLanguage = true;
                LogMessage("DONE", {"SpaceDOS language at the moment: " + User_Settings["language"], "–Ø–∑—ã–∫ SpaceDOS –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " + User_Settings["language"]}, 000);
            }
            if (!foundUsername && line.find("UserName: ") != string::npos) {
                User_Settings["username"] = line.substr(10);
                foundUsername = true;
                LogMessage("DONE", {"The user's current nickname: " + User_Settings["username"], "–¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - " + User_Settings["username"]}, 000);
            }
            if (!foundDebug_Mode && line.find("Debug Mode: ") != string::npos) {
                User_Settings["Debug Mode"] = line.substr(12);
                foundDebug_Mode = true;
            }
            if (!Password && line.find("Password: ") != string::npos) {
                User_Settings["Password"] = line.substr(10);
                if (User_Settings["Password"].empty()) {
                    Password = false;
                }
                else {
                    Password = true;
                }
                foundPassword = true;
            }
            if (foundLanguage && foundUsername && foundVersion && foundDebug_Mode && foundPassword) {
                LogMessage("INFO", {"All data found: username, language, password and debug mode", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è–∑—ã–∫, –ø–∞—Ä–æ–ª—å –∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"}, 000);
                break;
            }
        }
        data.close();
    }
    else {
        LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
    }
}

// –ü—Ä–æ—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø—É—Ç–∏ Data/data.data
void ReadDataFile(string VarName, string& GetVar) {
    ifstream data(dataFilePath);
    if (data) {
        string line;
        bool foundVar = false;
        while (getline(data, line)) {
            if (!foundVar && line.find(VarName + ": ") != string::npos) {
                GetVar = line.substr(VarName.size() + 2);
                foundVar = true;
                LogMessage("DONE", {"The value of the variable ( " + VarName + " ) is: " + GetVar, "–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ( " + VarName + " ) —Ä–∞–≤–Ω—è–µ—Ç—Å—è: " + GetVar}, 000);
            }
            if (foundVar) {
                LogMessage("INFO", {"All data found: username, language and debug mode", "–î–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, " + VarName + " , –Ω–∞–π–¥–µ–Ω–∞"}, 000);
                break;
            }
        }
        data.close();
    }
    else {
        LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
    }
}

// –ü—Ä–æ—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤ —Ñ–∞–π–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏
void ReadDataFile(string VarName, string& GetVar, path FilePath) {
    ifstream data(FilePath);
    if (data) {
        string line;
        bool foundVar = false;
        while (getline(data, line)) {
            if (!foundVar && line.find(VarName + ": ") != string::npos) {
                GetVar = line.substr(VarName.size() + 2);
                foundVar = true;
                LogMessage("DONE", {"The value of the variable ( " + VarName + " ) is: " + GetVar, "–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ( " + VarName + " ) —Ä–∞–≤–Ω—è–µ—Ç—Å—è: " + GetVar}, 000);
            }
            if (foundVar) {
                LogMessage("INFO", {"All data found: username, language and debug mode", "–î–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, " + VarName + " , –Ω–∞–π–¥–µ–Ω–∞"}, 000);
                break;
            }
        }
        data.close();
    }
    else {
        LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø—É—Ç–∏ Data/data.data
void EditData(const string& field, const string& value) {
    ifstream inputFile(dataFilePath);
    ofstream tempFile(dataTempFilePath);
    if (inputFile && tempFile) {
        string line;
        bool fieldFound = false;
        while (getline(inputFile, line)) {
            if (line.find(field)!= string::npos) {
                tempFile << field << ": " << value << endl;
                fieldFound = true;
            }
            else {
                tempFile << line << '\n';
            }
        }
        inputFile.close();
        tempFile.close();
        remove(dataFilePath);
        rename(dataTempFilePath, dataFilePath);
        if (!fieldFound) {
            LogMessage("ERROR", {"Field not found", "–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, 000);
        }
    }
    else {
        LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø—É—Ç–∏ {–ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–∞–º–∏}
void EditData(const string& field, const string& value, const path FilePath, const path TempFilePath) {
    ifstream inputFile(FilePath);
    ofstream tempFile(TempFilePath);
    if (inputFile && tempFile) {
        string line;
        bool fieldFound = false;
        while (getline(inputFile, line)) {
            if (line.find(field)!= string::npos) {
                tempFile << field << ": " << value << endl;
                fieldFound = true;
            }
            else {
                tempFile << line << '\n';
            }
        }
        inputFile.close();
        tempFile.close();
        remove(FilePath);
        rename(TempFilePath, FilePath);
        if (!fieldFound) {
            LogMessage("ERROR", {"Field not found", "–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, 000);
        }
    }
    else {
        LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
    }
}