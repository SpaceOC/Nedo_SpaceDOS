// –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ... –û–ø—è—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã (help, version –∏ —Ç.–¥) –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –±—É–¥—É—Ç... üíÄüëç
#include <iostream>
#include <chrono>
#include <thread>
#include <string>
#include <ctime>
#include <fstream>
#include <cstdlib>
#include <sstream>
#include <cmath>
#include <cctype>
#include "data.h"
#include "other.h"

using namespace std;

extern string language;
extern string version;

string description;

// –∫–æ–º–∞–Ω–¥–∞ help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
void help(string commandMoment) {
    vector<string> CommandsTextHelp_RU = { // –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        " exit \t –í—ã–π—Ç–∏ –∏–∑ SpaceDOS",
        " help \t –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        " settings \t –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        " version \t –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é —ç—Ç–æ–π \"–∏–≥—Ä—ã\"",
        " hi \t –ü—Ä–∏–≤–µ—Ç!", 
        " RSP \t –°—ã–≥—Ä–∞–π –≤ \"–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞\"!",
        " time \t –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç SpaceDOS [Not Real DOS]",
        " counter \t –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", 
        " clear \t –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É"
    };

    vector<string> CommandsTextHelp_EN = { // –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        " exit \t Exit SpaceDOS",
        " help \t Shows all available commands",
        " settings \t SpaceDOS settings",
        " version \t Shows the version of this \"game\"",
        " hi \t Hi!", 
        " RSP \t Play \"Rock, Paper, Scissors\"!",
        " time \t Shows how long SpaceDOS has been running",
        " counter \t No description", 
        " clear \t Clear the command line"
    };
    if (commandMoment.empty() and language == "Russian") {
        for (const auto& command : CommandsTextHelp_RU) {
            cout << command << endl;
        }
        LogMessage("DONE", {"", "–ö–æ–º–∞–Ω–¥–∞ \"help\" –≤—ã–≤–µ–ª–∞ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ) —É—Å–ø–µ—à–Ω–æ"}, 000);
    }
    else if (commandMoment.empty() and language == "English") {
        for (const auto& command : CommandsTextHelp_EN) {
            cout << command << endl;
        }
        LogMessage("DONE", {"", "–ö–æ–º–∞–Ω–¥–∞ \"help\" –≤—ã–≤–µ–ª–∞ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ) —É—Å–ø–µ—à–Ω–æ"}, 000);
    }
    else {
        if (language == "Russian") {
            for (const auto& command : CommandsTextHelp_RU) {
                if (command.find(commandMoment)!= string::npos) {
                    cout << command << endl;
                    LogMessage("DONE", {"", "–ö–æ–º–∞–Ω–¥–∞ \"help\" –≤—ã–≤–µ–ª–∞ \"" + command + "\" (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ) —É—Å–ø–µ—à–Ω–æ"}, 000);
                }
            }
        }
        else {
            for (const auto& command : CommandsTextHelp_EN) {
                if (command.find(commandMoment)!= string::npos) {
                    cout << command << endl;
                    LogMessage("DONE", {"", "–ö–æ–º–∞–Ω–¥–∞ \"help\" –≤—ã–≤–µ–ª–∞ \"" + command + "\" (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ) —É—Å–ø–µ—à–Ω–æ"}, 000);
                }
            }
        }
    }
    cout << "----------------------------------------------------------" << endl;
    LogMessage("DONE", {"", "–†–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã \"help\" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}, 000);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
void settings() {
    int a;
    string b;
    int c;
    int d;

    cout << "What do you want to customize? \n\t1 - Profile\n\t2 - Language\n\t3 - Console Color\n\t4 - Debug Mode\n";
    cout << "Enter: ";
    cin >> a;

    if (a == 1) {
        cout << "New username: ";
        string new_username;
        cin >> new_username;

        /*getline(cin, new_username);*/

        EditData("UserName", new_username);
        ReadDataFile();
    } 
    else if (a == 2) {
        cout << "RU - Russian\nEN - English\n";
        cout << "Enter: ";
        cin >> b;

        if (b == "RU") {
            EditData("Language", "Russian");
            cout << "----------------------------------------------------------" << endl;
            LogMessage("DONE", {"", "–Ø–∑—ã–∫ —Å–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"}, 000);
        } 
        else if (b == "EN") {
            EditData("Language", "English");
            cout << "----------------------------------------------------------" << endl;
            LogMessage("DONE", {"", "–Ø–∑—ã–∫ —Å–º–µ–Ω—ë–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"}, 000);
        }
        ReadDataFile();
    } 
    else if (a == 3) {
        cout << "[0 - 9] - Console Color\n[0 - 9] - Text Color\n";
        cout << "Type in (Console Color): ";
        cin >> c;
        cout << "Type in (Text Color): ";
        cin >> d;

        if (c >= 0 && c <= 9 && d >= 0 && d <= 9) {
            string colorCode = "color " + to_string(c) + to_string(d);
            string colormoment(to_string(c) + to_string(d));
            system(colorCode.c_str());
            EditData("ColorsConsole", colormoment);
            cout << "----------------------------------------------------------" << endl;
            LogMessage("DONE", {"", "–¶–≤–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑–º–µ–Ω—ë–Ω. –í–æ—Ç –∫–æ–¥: " + colormoment}, 000);
        }
    } 
    else if (a == 4) {
        cout << "True/ON | False/OFF" << endl;
        cout << "Enter: ";
        cin >> b;

        if (b == "True" || b == "ON") {
            EditData("Debug Mode", "true");
            cout << "----------------------------------------------------------" << endl;
            LogMessage("DONE", {"", "Debug Mode –≤–∫–ª—é—á–µ–Ω"}, 000);
        } 
        else if (b == "False" || b == "OFF") {
            EditData("Debug Mode", "false");
            cout << "----------------------------------------------------------" << endl;
            LogMessage("DONE", {"", "Debug Mode –≤—ã–∫–ª—é—á–µ–Ω"}, 000);
        }
        ReadDataFile();
        cout << "----------------------------------------------------------" << endl;
    }
}

// HI! Hello! –ü—Ä–∏–≤–µ—Ç!!!
void hi() {
    cout << "Hi!" << '\n';
    cout << "----------------------------------------------------------" << endl;
    LogMessage("DONE", {"", "–£—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ \"Hi!\" —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"hi\""}, 000);
}

// version
void DOSVersion() {
    cout << "SpaceDOS " << "[ " << version << " ]" << '\n';
    cout << "----------------------------------------------------------" << endl;
    LogMessage("DONE", {"", "–£—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–µ—Ä—Å–∏–∏ SpaceDOS —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"version\""}, 000);
}

// –õ–æ–≥–æ
void logo() {
    std::vector<std::string> vs
    {
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£†‚£§‚£§‚£§)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ü‚¢õ‚†õ‚¢õ‚£â‚£§‚£â‚°Ä‚¢∏‚£ø‚£ø)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£æ‚£ø‚°ø‚†ã‚†Å‚†Ä‚†à‚¢∑‚£Ñ‚†à‚¢ø‚£ø‚£ø‚°á‚£º‚£ø‚°ø)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∑‚£§‚°à‚†ª‚¢ß‚£ø‚£ø‚†á)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚°Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£á‚£º‚£ø‚°ü‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚†ø‚†Å‚†Ä‚†Ä‚¢Ä‚†Ç‚†Ä‚†Ä‚†Ä‚†™‚¢Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚†Å‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚°ø‚†ã‚†â‚†≠‚†≠‚†≠‚¢≠‚†ü‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚°ø‚†Å‚†Ä‚†Ä)",
        R"(‚†Ä‚£†‚£æ‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†£‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†ô‚¢ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£∑‚£û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚†è‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚°ø‚†ò‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚£†‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚†É‚†Ä‚†Ä‚†à‚†≥‚£§‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚¢π‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚£†‚£ø‚£ø‚†ü‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†ò‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚¢∞‚£ø‚£ø‚†Å‚¢∞‚†É‚†ô‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†ò‚†∑‚°Ä‚¢Ä‚°î‚†Å‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚£ø‚£ø‚°á‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†ô‚¢¶‚¢Ä‚£Ä‚£†‚£¥‚£æ‚£ß‚°Å‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚¢∞‚£ø‚£ø‚†Ä‚†ò‚†Å‚†í‚†à‚£Ä‚£¥‚£æ‚£ø‚£ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ß‚£Ä‚£¥‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚¢∏‚£ø‚£ø‚£§‚£§‚£µ‚£∂‚£ø‚£ø‚°ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†ò‚†ø‚†ø‚†ø‚†ø‚†õ‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)"
    };
    for (auto s : vs)
        std::cout << s << "\n";
    cout << "----------------------------------------------------------" << endl;
    LogMessage("DONE", {"", "–õ–æ–≥–æ—Ç–∏–ø SpaceDOS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}, 000);
}