// –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ... –û–ø—è—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã (help, version –∏ —Ç.–¥) –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –±—É–¥—É—Ç... üíÄüëç
#include <iostream>
#include <windows.h>
#include <string>
#include <ctime>
#include <fstream>
#include <cstdlib>
#include <sstream>
#include <cmath>
#include <cctype>
#include "data.h"
#include "other.h"

using namespace std;

extern string language;
extern string version;

string description;

// –∫–æ–º–∞–Ω–¥–∞ help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
void help() {
    cout << "exit - –≤—ã–π—Ç–∏ –∏–∑ SpaceDOS" << endl << 
        "help - displays a list of all commands" << endl << 
        "settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" << endl << 
        "version - shows the version of this \"game\"" << endl << 
        "hi - Hi!" << endl << 
        "RSP - Rock, Scissors, Paper!" << endl << 
        "time - Work Time" << endl << 
        "counter - ..." << endl << 
        "clear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É" << endl << 
        "say - say" << endl;
    /*
    * –ê –ß–¢–û –¢–ê–ö –ú–û–ñ–ù–û –ë–´–õ–û?
    */
    cout << "----------------------------------------------------------" << endl;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
void settings() {
    int a;
    string b;
    int c;
    int d;

    cout << "What do you want to customize?\n1 - Profile\n2 - Language\n3 - Console Color\n";
    cout << "Enter: ";
    cin >> a;

    if (a == 1) {
        cout << "New username: ";
        string new_username;
        cin >> ws;

        getline(cin, new_username);

        EditData("UserName", new_username);
        ReadData();
    } 
    else if (a == 2) {
        cout << "RU - Russian\nEN - English\n";
        cout << "Enter: ";
        cin >> b;

        if (b == "RU") {
            EditData("Language", "Russian");
            cout << "----------------------------------------------------------" << endl;
        } 
        else if (b == "EN") {
            EditData("Language", "English");
            cout << "----------------------------------------------------------" << endl;
        }
        ReadData();
    } 
    else if (a == 3) {
        cout << "[0 - 9] - Console Color\n[0 - 9] - Text Color\n";
        cout << "Type in (Console Color): ";
        cin >> c;
        cout << "Type in (Text Color): ";
        cin >> d;

        if (c >= 0 && c <= 9 && d >= 0 && d <= 9) {
            string colorCode = "color " + to_string(c) + to_string(d);
            string colormoment(to_string(c) + to_string(d));
            system(colorCode.c_str());
            EditData("ColorsConsole", colormoment);
            cout << "----------------------------------------------------------" << endl;
        }
    } 
    else if (a == 4) {
        cout << "–¢–´ –ß–¢–û –°–ú–û–¢–†–ò–®–¨?! " << endl;
        cout << "----------------------------------------------------------" << endl;
    }
}

// HI! Hello! –ü—Ä–∏–≤–µ—Ç!!!
void hi() {
    cout << "Hi!" << '\n';
    cout << "----------------------------------------------------------" << endl;
}

// version
void DOSVersion() {
    cout << "SpaceDOS " << "[ " << version << " ]" << '\n';
    cout << "----------------------------------------------------------" << endl;
}

// –õ–æ–≥–æ –ù–ï –†–ê–ë–û–¢–ê–ï–¢! :(
void logo() {
    std::vector<std::string> vs
    {
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£†‚£§‚£§‚£§)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ü‚¢õ‚†õ‚¢õ‚£â‚£§‚£â‚°Ä‚¢∏‚£ø‚£ø)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£æ‚£ø‚°ø‚†ã‚†Å‚†Ä‚†à‚¢∑‚£Ñ‚†à‚¢ø‚£ø‚£ø‚°á‚£º‚£ø‚°ø)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∑‚£§‚°à‚†ª‚¢ß‚£ø‚£ø‚†á)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚°Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£á‚£º‚£ø‚°ü‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚†ø‚†Å‚†Ä‚†Ä‚¢Ä‚†Ç‚†Ä‚†Ä‚†Ä‚†™‚¢Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚†Å‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚°ø‚†ã‚†â‚†≠‚†≠‚†≠‚¢≠‚†ü‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚°ø‚†Å‚†Ä‚†Ä)",
        R"(‚†Ä‚£†‚£æ‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†£‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†ô‚¢ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£∑‚£û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚†è‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚°ø‚†ò‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚£†‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚†É‚†Ä‚†Ä‚†à‚†≥‚£§‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚¢π‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚†Ä‚£†‚£ø‚£ø‚†ü‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†ò‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚¢∞‚£ø‚£ø‚†Å‚¢∞‚†É‚†ô‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†ò‚†∑‚°Ä‚¢Ä‚°î‚†Å‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†Ä‚£ø‚£ø‚°á‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†ô‚¢¶‚¢Ä‚£Ä‚£†‚£¥‚£æ‚£ß‚°Å‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚¢∞‚£ø‚£ø‚†Ä‚†ò‚†Å‚†í‚†à‚£Ä‚£¥‚£æ‚£ø‚£ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ß‚£Ä‚£¥‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚¢∏‚£ø‚£ø‚£§‚£§‚£µ‚£∂‚£ø‚£ø‚°ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)",
        R"(‚†ò‚†ø‚†ø‚†ø‚†ø‚†õ‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä)"
    };
    for (auto s : vs)
        std::cout << s << "\n";
    cout << "----------------------------------------------------------" << endl;
}