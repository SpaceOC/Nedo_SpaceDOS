#include <iostream>
#include <windows.h>
#include <locale>
#include <vector>
#include <string>
#include <algorithm>
#include <fstream>
#include <filesystem>
#include "other.h"

using namespace std;
using namespace filesystem;

string version = "1.4 Alpha"; // –í–µ—Ä—Å–∏—è SpaceDOS

string DefaultLanguage = "English"; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —è–∑—ã–∫ –≤ SpaceDOS
string DefaultUserName = "User"; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SpaceDOS
string Debug_Mode_Default = "false"; // –î–µ–±–∞–≥ –º–æ–¥–µ (–í–µ–ª–∏–∫–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –æ—Ç —Ä—É–∫–æ–∂–æ–ø–∞)

string RealVersion;
string language; // –Ø–∑—ã–∫ (–ù–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
string username; // Username (–ù–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
string Debug_Mode; // –î–µ–±–∞–≥ –º–æ–¥–µ (–ù–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)

path dataFilePath = "Data/data.data"; // –ü—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
path logFilePath = "Data/logs.data"; // –ü—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏ (–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å –¥–µ–±–∞–≥ –º–æ–¥–µ)
path dataTempFilePath = "Data/tempData.data"; // –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

void CreateFolders() {
    create_directory("Addons"); // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ Addons (–ë–æ–∂–µ –∑–∞—á–µ–º —è –≤—Å—ë –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é xD)
    create_directory("Data");
    create_directory("Temp");
    create_directory("Music");
    create_directory("Texts");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–æ–≤ –∏ —Ñ–∞–π–ª–∞ AddonsList.json
void CheckAddons() {
    //string path = "Addons/AddonsList.json";
    path path = "Addons/AddonsList.txt";
    if (exists(path)) {
        LogMessage("INFO", {"The file \"AddonsList.txt\" was found.", "–§–∞–π–ª \"AddonsList.txt\" –Ω–∞–π–¥–µ–Ω"}, 000); // –ú-–¥–∞.... –ù–∏—á–µ–≥–æ –ø—É—Ç–Ω–æ–≥–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –¥–ª—è LogMessage üíÄüíÄüíÄ

        
    } 
    else {
        LogMessage("ERROR", {"The file \"AddonsList.txt\" was not found.", "–§–∞–π–ª \"AddonsList.txt\" –Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404);

        ifstream file(path);
        if (!file) {
            ofstream data(path);
            if (data) {
                data.close();
            }
            else {
                LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ AddonsList.txt"}, 000);
            }
        }
        else {
            file.close();
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
void CreateLogFile() {
    ifstream file(logFilePath);
    if (!file && Debug_Mode == "true") {
        ofstream data(logFilePath);
        if (data) {
            data.close();
        }
        else {
            LogMessage("ERROR", {"Error opening log file", "–û—à–∏–±–∫–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞"}, 000);
        }
    }
    else {
        file.close();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ - Language, Username, Verifed of OOBE –∏ Colors Console
void CreateDataFile() {
    ifstream file(dataFilePath);
    if (!file) {
        ofstream data(dataFilePath);
        if (data) {
            data << "Language: " << DefaultLanguage << '\n';
            data << "UserName: " << DefaultUserName << '\n';
            data << "Version: " << version << '\n';
            data << "Debug Mode: " << Debug_Mode_Default << '\n';
            data.close();
        }
        else {
            LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
        }
    }
    else {
        file.close();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Language, Username, Verifed of OOBE –∏ Colors Console)
void ReadDataFile() {
    ifstream data(dataFilePath);
    if (data) {
        string line;
        bool foundLanguage = false;
        bool foundUsername = false;
        bool foundVersion = false;
        bool foundDebug_Mode = false;
        while (getline(data, line)) {
            if (!foundLanguage && line.find("Language: ") != string::npos) {
                language = line.substr(10);
                foundLanguage = true;
                LogMessage("DONE", {"SpaceDOS language at the moment: " + language, "–Ø–∑—ã–∫ SpaceDOS –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - " + language}, 000);
            }
            if (!foundUsername && line.find("UserName: ") != string::npos) {
                username = line.substr(10);
                cout << "Username: " << username << '\n';
                foundUsername = true;
                LogMessage("DONE", {"The user's current nickname: " + username, "–¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - " + username}, 000);
            }
            if (!foundVersion && line.find("Version: ") != string::npos) {
                RealVersion = line.substr(9);
                cout << "Version: " << RealVersion << '\n';
                foundVersion = true;
                LogMessage("DONE", {"The current version of SpaceDOS: " + version, "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è SpaceDOS - " + version}, 000);
            }
            if (!foundDebug_Mode && line.find("Debug Mode: ") != string::npos) {
                Debug_Mode = line.substr(12);
                cout << "Debug Mode: " << Debug_Mode << '\n';
                foundDebug_Mode = true;
            }
            if (foundLanguage && foundUsername && foundVersion && foundDebug_Mode) {
                LogMessage("INFO", {"All data found: version, user name, language and debug mode", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: –≤–µ—Ä—Å–∏—è, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è–∑—ã–∫ –∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"}, 000);
                break;
            }
        }
        data.close();
    }
    else {
        LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Language –∏ Username) –≤ data.data
void EditData(const string& field, const string& value) {
    ifstream inputFile(dataFilePath);
    ofstream tempFile(dataTempFilePath);
    if (inputFile && tempFile) {
        string line;
        bool fieldFound = false;
        while (getline(inputFile, line)) {
            if (line.find(field)!= string::npos) {
                tempFile << field << ": " << value << endl;
                fieldFound = true;
            }
            else {
                tempFile << line << '\n';
            }
        }
        inputFile.close();
        tempFile.close();
        remove(dataFilePath);
        rename(dataTempFilePath, dataFilePath);
        if (!fieldFound) {
            LogMessage("ERROR", {"Field not found", "–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, 000);
        }
    }
    else {
        LogMessage("ERROR", {"Error opening the data file", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"}, 000);
    }
}