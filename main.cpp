// –î–∞–∂–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø–æ—á–µ–º—É —Ç—É—Ç —Ç–∞–∫ –º–Ω–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫ (–∏–ª–∏ –∫–∞–∫ —Ç–∞–º –∏—Ö –Ω–∞–∑—ã–≤–∞—Ç—å)....
#include <iostream>
#include <windows.h>
#include <fstream>
#include <locale>
#include <vector>
#include <string>
#include <algorithm>
#include "Commands/Main_Commands.h"
#include "Games/Main_Games.h"
#include "data.h"
#include "time.h"
#include "counters.h"
#include "other.h"
#include "OOBE.h"

// By SpaceOC!!!!!!!!!
// By SpaceOC!!!!!!!!!
// By SpaceOC!!!!!!!!!


// –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥ –Ω–µ —Å –≥–∏—Ç —Ö–∞–±–∞ –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ —á–∏—Ç–∞–ª–∏ readme —Ç–∞–º, —Ç–æ —è –æ—Å—Ç–∞–≤–∏–ª –µ–≥–æ –∑–¥–µ—Å—å :/
/*
# C++
- –Ø –µ–≥–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å. –Ø –Ω–µ –≤—Å—ë –≤—ã—É—á–∏–ª. –Ø –¥–æ–±–∞–≤–ª—è—é –≤ SpaceDOS —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –∏–ª–∏ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è SpaceDOS –ø–æ –º–æ–µ–º—É –º–Ω–µ–Ω–∏—é.

# –ß—Ç–æ –∑–∞ SpaceDOS [Not real DOS]
- –ü—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç—Å—è –≤ —Å–æ–ª–æ
- –ú–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ C++ (–Ω–µ —Å—É–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)
- –ü—Ä–æ–µ–∫—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–∞ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ C++

# –ó–∞—á–µ–º —Å–¥–µ–ª–∞–ª? –í —á—ë–º –∏–¥–µ—è?
- –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ, —á–∏—Å—Ç–æ –ø–æ –ø—Ä–∏–∫–æ–ª—É. –ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª –ø–æ–¥—É–º—ã–≤–∞—Ç—å, —á—Ç–æ SpaceDOS - –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª-–≤–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∏–≥—Ä –±—É–¥–µ—Ç. –ö –ø—Ä–∏–º–µ—Ä—É `–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞` –∏–ª–∏ `–ó–º–µ–π–∫–∞` (–∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤ 1.0 Alpha). –ü–æ—Ç–æ–º –Ω–∞—á–∞–ª –¥—É–º–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á. –ù–∞–ø—Ä–∏–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ... –Ø –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª... –ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è —è –æ–ø—è—Ç—å –ø–æ–¥—É–º–∞–ª, —á—Ç–æ –≤ SpaceDOS –±—É–¥–µ—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∏–≥—Ä üíÄüíÄüíÄüíÄüíÄ.... –í–æ–∑–º–æ–∂–Ω–æ, –±—É–¥–µ—Ç –≤—Å—ë —Å—Ä–∞–∑—É... –ê –º–æ–∂–µ—Ç –∏ –Ω–µ—Ç `¬Ø\_(„ÉÑ)_/¬Ø`.

# –í–µ—Ä—Å–∏—è SpaceDOS?
- 1.0 Alpha

# –ß—Ç–æ —Ç–∞–º –µ—Å—Ç—å?
- OOBE –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Ö
- –∫–æ–º–∞–Ω–¥—ã `help, say, clear, counter, hi, delete, notepad –∏ –µ—â—ë –¥—Ä—É–≥–∏–µ`
- –†—É—Å—Å–∫–∏–π (??%) –∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (??%)
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Ö

# –¢–≤–æ–π –∫–æ–¥ —É–∂–∞—Å–µ–Ω. –ü–ï–†–ï–î–ï–õ–´–í–ê–ô!
- –ù—É –∞ –∫–∞–∫ –±–µ–∑ —ç—Ç–æ–≥–æ. –Ø –∂–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å C++

# –ö–∞–∫ c–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π –∫–æ–¥?
- –ò–º–µ—Ç—å –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ —Ä–∞–∑—É–º–µ–µ—Ç—Å—è!
- MinGW

### –ê –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MinGW?
- https://semicolon.dev/windows/how-to-install-mingw-gcc-g-compiler-windows-10-11-2023 (–î–ª—è Windows + –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –†—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é –Ω–µ –Ω–∞—à—ë–ª, –ø—Ä–æ—Å—Ç–∏—Ç–µ)
- https://onstartup.ru/razrabotka/mingw-w64/?ysclid=lq51y8zpjr464479408 (–î–ª—è Ubuntu + –Ω–∞ —Ä—É—Å—Å–∫–æ–º)

### –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω MinGW
- –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (–ï—Å–ª–∏ –Ω–∞ Windows. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Å—ë –Ω–∞ –ª–∏–Ω—É–∫—Å–µ? –Ø –Ω–µ –∑–Ω–∞—é :(. –Ø –ø–ª–æ—Ö–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å —Ç–∞–º + —Ç–æ–ª—å–∫–æ —Å–∞–º –Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏–Ω—É–∫—Å–æ–º... Arch üíÄüëç. –ß–µ—Ä–µ–∑ —Å—Ç–æ –ª–µ—Ç –ø–æ–ø—Ä–æ–±—É—é Ubunty)
- –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º SpaceDOS, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É cd üíÄüíÄüíÄüíÄ. –ù–∞–ø—Ä–∏–º–µ—Ä: `cd C:\–ø—É—Ç—å\–∫\–≤–∞—à–µ–π\–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\c\–∏—Å—Ö–æ–¥–Ω—ã–º\–∫–æ–¥–æ–º\SpaceDOS`
- –í –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞–ø–∏—à–∏—Ç–µ `mingw32-make`.
- –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ–π–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ, —Ç–æ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è —Ñ–∞–π–ª –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `SpaceDOS.exe`
*/

using namespace std;

extern string version;
extern string DefaultLanguage;
extern string DefaultUserName;
extern string language;
extern string username;
extern string VerifedOOBE;

// DOS
void DOS() {
    vector<string> allowedCommands = { // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "help", "logo", "calculator", "version", "exit", 
        "delete", "hi", "say", "RSP", "settings", 
        "counter", "time", "clear"
    };

    printMessage(true, "Welcome to SpaceDOS!", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SpaceDOS!");
    cout << "Version SpaceDOS - [ " << version << " ]" << '\n';

    PrintTimeMonth();

    while (true){
        if(language == "Russian"){
            cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ";
        }
        else{
            cout << "Enter command: ";
        }

        string command_input;
        cin >> ws; // –ø–ª–æ–≤: —Ç—ã –ø—Ä–æ–≤—ë–ª —Å—Ç–æ —á–∞—Å–æ–≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–∞ —Å—Ç—Ä–æ—á–∫–∞ —Å–ø–∞—Å—ë—Ç —Ç–µ–±–µ –∂–æ–ø—É –æ—Ç wcin.ignore()

        getline(cin, command_input);

        if(command_input == "delete"){
            FUNdelete();
        }

        if (command_input == "clear") {
            system("cls");
        }

        if (command_input == "time") {
            calculateWorkTime();
        }

        if(command_input == "exit"){
            system("color 07");
            
            break;
        }

        if(command_input == "hi"){
            hi();
        }

        if(command_input == "say"){
            say();
        }

        if(command_input == "version"){
            DOSVersion();
        }

        if(command_input == "counter"){
            counter();
        }

        if(command_input == "help"){
            help();
        }

        if (find(allowedCommands.begin(), allowedCommands.end(), command_input) == allowedCommands.end()) {
            cout << "Unknown command! Write \"help\" to find out what commands exist in SpaceDOS" << '\n';
            cout << "----------------------------------------------------------" << endl;
        }

        if (command_input == "calculator") {
        }

        if(command_input == "RSP"){ // Rock, Scissors, Paper // –î–∞.. –Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –ø–æ –¥—Ä—É–≥–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å. –£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ, –µ—Å–ª–∏ –Ω–∞–ø–∏—à—É Rock, Scissors, Paper –≤–º–µ—Å—Ç–æ "RSP"
            RSP();
        }

        if (command_input == "logo"){ // –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :(
            logo();
        }

        if (command_input == "notepad") {
            notepad();
        }

        if (command_input == "settings") {
            settings();
        }
    }
}


int main(){
    SetConsoleOutputCP(65001);
    SetConsoleCP(65001);

    CreateData();
    ReadData();

    vector<string> symbolsLoadingDOS = { // –°–∏–º–≤–æ–ª—ã —Ñ—ç–π–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOS
        "|", "/", "-", "\\"
    };
    fakeLoading(symbolsLoadingDOS, "Loading", "Loading commands", "Loading commands", "Launching SpaceDOS", "SpaceDOS launched successfully!");

    Sleep(100);

    if (VerifedOOBE == "false" || VerifedOOBE == "0") {
        StartOOBE();
    }
    if (VerifedOOBE == "unknown") {
        while (VerifedOOBE == "false" || VerifedOOBE == "unknown") {
            cout << "–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤–∏–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ OOBE, —á—Ç–æ–±—ã SpaceDOS –Ω–µ —Å–ª–æ–º–∞–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã." << endl << "1 or OK - –ó–∞–ø—É—Å—Ç–∏—Ç—å OOBE" << endl << "2 or SKIP - –î–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SpaceDOS (–ö–†–ê–ô–ù–ï –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)" << endl << "–í–≤–µ–¥–∏—Ç–µ: ";
            string wtf_moment;
            cin >> ws;
            getline(cin, wtf_moment);

            if (wtf_moment == "1" || wtf_moment == "OK" || wtf_moment == "Ok" || wtf_moment == "OK" || wtf_moment == "O–∫") {
                StartOOBE();
                break;
            }
            if (wtf_moment == "2" || wtf_moment == "SKIP" || wtf_moment == "Skip") {
                DOS();
                break;
            }
            else {
                cout << "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ: ";
            }
        }
    }
    if (VerifedOOBE == "true") {
        DOS();
    }

}
